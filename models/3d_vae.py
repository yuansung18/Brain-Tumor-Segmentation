import torch
import torch.nn as nn
import torch.nn.functional as F

from .base import PytorchModelBase
from .utils import get_tensor_from_array


class R2UNet(PytorchModelBase):

    def __init__(
        self,
        data_format: dict,
        batch_sampler_id: str = 'three_dim',
        floor_num: int = 4,
        kernel_size: int = 3,
        channel_num: int = 16,
        conv_times: int = 2,
        use_position = False,
        dropout_rate: int = 0.,
        attention: bool = False,
        self_attention: int = 0,
        **kwargs,
    ):
        self.dropout_rate = dropout_rate
        self.kernel_size = kernel_size
        self.conv_times = conv_times
        self.use_position = use_position
        super(R2UNet, self).__init__(
            batch_sampler_id=batch_sampler_id,
            data_format=data_format,
            forward_outcome_channels=channel_num,
            head_outcome_channels=channel_num,
            **kwargs,
        )
        self.floor_num = floor_num
        image_chns = data_format['channels']
        if use_position:
            image_chns += 1
        self.down_layers = nn.ModuleList()
        self.up_layers = nn.ModuleList()

        self.self_attention_module = nn.Sequential(*[
            SelfAttention(in_dim=2 ** floor_num * channel_num)
            for _ in range(self_attention)
        ])

        for floor_idx in range(floor_num):
            channel_times = 2 ** floor_idx
            d = DownConv(channel_num * channel_times, kernel_size, dropout_rate)
            self.down_layers.append(d)

        for floor_idx in range(floor_num)[::-1]:
            channel_times = 2 ** floor_idx
            up_conv_class = AttentionUpConv if attention else UpConv
            u = up_conv_class(
                channel_num * 2 * channel_times,
                kernel_size,
                dropout_rate,
            )
            self.up_layers.append(u)

    def forward_head(self, inp, data_idx):
        # inp, pos = inp['slice'], inp['position']
        x = get_tensor_from_array(inp)

        # if self.use_position:
        #     pos = get_tensor_from_array(pos)
        #     pos = pos.view(pos.shape[0], 1, 1, 1)
        #     pos = pos.expand(-1, 1, x.shape[-2], x.shape[-1])
        #     x = torch.cat([x, pos], dim=1)

        x = self.heads[data_idx](x)
        return x

    def forward(self, x):
        x_out = [x]
        for down_layer in self.down_layers:
            x = down_layer(x)
            x_out.append(x)

        x = self.self_attention_module(x)
        x_out = x_out[:-1]
        for x_down, u in zip(x_out[::-1], self.up_layers):
            x = u(x, x_down)
        return x

    def build_heads(self, input_channels: list, output_channel: int):
        if self.use_position:
            input_channels = [chn + 1 for chn in input_channels]
        return nn.ModuleList([
            RRCNN_block(
                input_channel,
                output_channel,
                self.kernel_size,
                self.dropout_rate,
            )
            for input_channel in input_channels
        ])

    def build_tails(self, input_channels, class_nums):
        return nn.ModuleList([
            nn.Conv3d(input_channels, class_num, kernel_size=1)
            for class_num in class_nums
        ])

class Green_block(nn.Module):
    """
    green_block(inp, filters, name=None)
    ------------------------------------
    Implementation of the special residual block used in the paper. The block
    consists of two (GroupNorm --> ReLu --> 3x3x3 non-strided Convolution)
    units, with a residual connection from the input `inp` to the output. Used
    internally in the model. Can be used independently as well.

    Parameters
    ----------
    `inp`: An keras.layers.layer instance, required
        The keras layer just preceding the green block.
    `filters`: integer, required
        No. of filters to use in the 3D convolutional block. The output
        layer of this green block will have this many no. of channels.
    `data_format`: string, optional
        The format of the input data. Must be either 'chanels_first' or
        'channels_last'. Defaults to `channels_first`, as used in the paper.
    `name`: string, optional
        The name to be given to this green block. Defaults to None, in which
        case, keras uses generated names for the involved layers. If a string
        is provided, the names of individual layers are generated by attaching
        a relevant prefix from [GroupNorm_, Res_, Conv3D_, Relu_, ], followed
        by _1 or _2.

    Returns
    -------
    `out`: A keras.layers.Layer instance
        The output of the green block. Has no. of channels equal to `filters`.
        The size of the rest of the dimensions remains same as in `inp`.
    """
    def __init__(self, in_ch, out_ch, kernel_size, data_format='channels_first', name=None):
        super(Green_block, self).__init__()
        self.skip_conv = nn.Conv3d(in_ch, out_ch, kernel_size=1)

        inp_res = Conv3D(
            filters=filters,
            kernel_size=(1, 1, 1),
            strides=1,
            data_format=data_format,
            name=f'Res_{name}' if name else None)(inp)

        # axis=1 for channels_first data format
        # No. of groups = 8, as given in the paper
        x = GroupNormalization(
            groups=8,
            axis=1 if data_format == 'channels_first' else 0,
            name=f'GroupNorm_1_{name}' if name else None)(inp)
        x = Activation('relu', name=f'Relu_1_{name}' if name else None)(x)
        x = Conv3D(
            filters=filters,
            kernel_size=(3, 3, 3),
            strides=1,
            padding='same',
            data_format=data_format,
            name=f'Conv3D_1_{name}' if name else None)(x)

        x = GroupNormalization(
            groups=8,
            axis=1 if data_format == 'channels_first' else 0,
            name=f'GroupNorm_2_{name}' if name else None)(x)
        x = Activation('relu', name=f'Relu_2_{name}' if name else None)(x)
        x = Conv3D(
            filters=filters,
            kernel_size=(3, 3, 3),
            strides=1,
            padding='same',
            data_format=data_format,
            name=f'Conv3D_2_{name}' if name else None)(x)

        out = Add(name=f'Out_{name}' if name else None)([x, inp_res])
        return out



class DownConv(nn.Module):

    def __init__(self, in_ch, kernel_size, dropout_rate):
        super(DownConv, self).__init__()
        out_ch = in_ch * 2
        self.p = dropout_rate
        self.down_conv = nn.Conv3d(in_ch, in_ch, kernel_size=kernel_size, padding=kernel_size//2, stride=2)
        if dropout_rate == 0:
            self.batch_norm = nn.BatchNorm3d(in_ch)
        else:
            self.dropout = nn.Dropout3d(p=dropout_rate)
        self.conv = RRCNN_block(in_ch, out_ch, kernel_size, dropout_rate)

    def forward(self, x):
        x = self.down_conv(x)
        if self.p == 0:
            x = self.batch_norm(x)
        else:
            x = self.dropout(x)
        x = F.relu(x)
        x = self.conv(x)

        return x


class UpConv(nn.Module):

    def __init__(self, in_ch, kernel_size, dropout_rate):
        super(UpConv, self).__init__()
        out_ch = in_ch // 2
        self.p = dropout_rate
        self.conv_transpose = nn.ConvTranspose3d(in_ch, out_ch, kernel_size=kernel_size, padding=kernel_size//2, stride=2)
        if dropout_rate == 0:
            self.batch_norm = nn.BatchNorm3d(out_ch)
        else:
            self.dropout = nn.Dropout3d(p=dropout_rate)
        self.conv = RRCNN_block(out_ch, out_ch, kernel_size, dropout_rate)

    def forward(self, x_down, x_up):
        x_down = self.conv_transpose(x_down)
        if self.p == 0:
            x_down = self.batch_norm(x_down)
        else:
            x_down = self.dropout(x_down)
        x_down = F.relu(x_down)
        # print(x_down.shape, x_up.shape)
        if x_down.shape != x_up.shape:
            # this case will only happen when
            # x1 [N, C, D-1, H-1, W-1]
            # x2 [N, C, D,   H,   W  ]
            p_d = x_up.shape[2] - x_down.shape[2]
            p_h = x_up.shape[3] - x_down.shape[3]
            p_w = x_up.shape[4] - x_down.shape[4]
            pad = nn.ConstantPad3d((0, p_w, 0, p_h, 0, p_d), 0)
            x_down = pad(x_down)

        # x = torch.cat([x_down, x_up], dim=1)
        x = x_down + x_up
        # print(x.shape)

        x = self.conv(x)
        return x


